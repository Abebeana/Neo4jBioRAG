"""
This module retrieves relevant data from the database in response to function calls 
generated by the LLM, and supplies the retrieved information for use in the LLM's 
response generation stage.
"""

import os
from dotenv import load_dotenv
from src.utils.logger_config import setup_logger

load_dotenv()
logger = setup_logger(__name__)

from src.llm.llm_client import LlmClient
from src.database.neo4j_database import Neo4jDatabase
from src.utils.parse_function_call import parse_function_call


class Retriever:
    def __init__(self, llm_client: LlmClient, database: Neo4jDatabase) -> None:
        """Initializes the Retriever with LLM client and database connection."""
        self.llm_client = llm_client
        self.database = database
        logger.info("Retriever initialized successfully.")

    def retrieve_data(self, query: str) -> list[dict]:
        """
        Retrieves data from the database based on the provided query.
        
        Args:
            query: The input query string
            
        Returns:
            list[dict]: Retrieved data from the database
            
        Process:
            1. Gets the functions to use from the LLM
            2. Queries the database for relevant data
        """
        try:
            logger.debug(f"Retrieving data for query: {query}")
            
            # Get response from LLM
            response = self.llm_client.function_calling_chain.invoke(
                {
                    "chat_history": self.llm_client.memory.chat_memory,
                    "question": query
                }
            )
            

            # Parse functions from LLM response
            functions = self.llm_client.output_parser.parse(response['text'])
            print(f"Parsed functions: {functions}")
            print("-" * 50)
            formatted_function_calls = parse_function_call(functions)
            print(f"Formatted function calls: {formatted_function_calls}")
            print("-" * 50)

            results = []
            
            # Execute each function call
            for function_name, gene_name in formatted_function_calls:
                try:
                    result = self._execute_function_call(function_name, gene_name)
                    if result:
                        if isinstance(result, list):
                            results.extend(result)
                        else:
                            results.append(result)
                except Exception as e:
                    logger.error(f"Error executing {function_name}: {str(e)}")
                    continue

            logger.debug(f"Retrieved data: {results}")
            return results
            
        except Exception as e:
            logger.error(f"An error occurred while retrieving data: {e}", exc_info=True)
            raise e

    def _execute_function_call(self, function_name: str, gene_name: str) -> list | dict:
        """
        Executes a single database function call.
        
        Args:
            function_name: Name of the database function to call
            gene_name: Gene name to query
            
        Returns:
            Result from the database query
        """
        function_map = {
            'get_activators_of_gene': self.database.get_activators_of_gene,
            'get_repressors_of_gene': self.database.get_repressors_of_gene,
            'get_regulators_of_gene': self.database.get_regulators_of_gene,
            'get_genes_repressed_by_gene': self.database.get_genes_repressed_by_gene,
            'get_genes_activated_by_gene': self.database.get_genes_activated_by_gene,
            'get_genes_regulated_by_gene': self.database.get_genes_regulated_by_gene
        }
        
        if function_name not in function_map:
            logger.warning(f"Unknown function: {function_name}")
            return []
            
        return function_map[function_name](gene_name)